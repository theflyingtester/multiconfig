//
Found on plusbryan: myfirstfiveminutes

Tested on Debian Wheezy

//


if an authorized_keys file gets clobbered or mis-permissioned, I need to log into the remote terminal to fix it
 The actual user gets sudo access via an arbitrarily long password and 
 log in is done with public keys, not passwords.
 Administration is as simple as keeping the authorized_keys file up-to-date across servers. 
 Root login over ssh is disabled, 
 and the actual user can only log in from a defined IP (block).

//Todo: try the IP with VPN etc to make sure gaps are seen before disconnecting any direct terminal

Start here:

Determine which user id you need on your server/client 

I have a monkey.

passwd monkey
//also for root and others :-)

generate das key with puttygen
vim /home/deploy/.ssh/authorized_keys
to add that key to the list
chmod 400 /home/deploy/.ssh/authorized_keys
chown deploy:deploy /home/deploy -R

use visudo to limit the accounts that can do sudo
# User privilege specification
root    ALL=(ALL:ALL) ALL
monkey  ALL=(ALL:ALL) ALL

comment out other trickery:
# Allow members of group sudo to execute any command
#%sudo  ALL=(ALL:ALL) ALL

Configure ssh to prevent password & root logins and lock ssh to particular IPs:
sudo vim /etc/ssh/sshd_config
#Add Monkey
AllowUsers monkey@localhost monkey@127.0.0.1 monkey@9.142.57.50

restart sshd 
sudo service ssh restart

use ssh -vT monkey@localhost
for troubleshooting: a -1 means file not found

if this fails try
ssh-keygen 
for a standard RSA key on your localhost

For git stuffs
run exec ssh-agent bash in the terminal, 
then run the ssh-add command to add the actual key file

apt-get install unattended-upgrades

sudo vim /etc/apt/apt.conf.d/10periodic
APT::Periodic::Update-Package-Lists "1";
APT::Periodic::Download-Upgradeable-Packages "1";
APT::Periodic::AutocleanInterval "7";
APT::Periodic::Unattended-Upgrade "1";

sudo vim /etc/apt/apt.conf.d/50unattended-upgrades 
Unattended-Upgrade::Origins-Pattern {
        "origin=Debian,archive=stable,label=Debian-Security";
};


